WEEK 2 SSH AND SECURITY

SETTING IP KEY-BASED SSH LOGIN

1. On your work station open powershell.
  enter the following command: ssh-keygen -t ed25519 -C "user@labname"
  *replace string inside quotes with your server name. Keep the quotations.*
  a.Save to default path
  b.Setting passphrase is optional
  c.This creates a public key

2.Display the public key using the following command: type $env:USERPROFILE\.ssh\id_ed25519.pub
  a. Keep this available as we will need this to copy over into the server terminal.

3.Add the key to your server(If not setup, I will provide a guide below these steps)
  a. In powershell, open a new tab for your server terminal.
  b. SSH into your terminal server using the following command: ssh user@serverip
  c. In the terminal copy these commands:
    mkdir -p ~/.ssh
    chmod 700 ~/.ssh
  d. Copy the public key in your home server tab into this text file. 
    nano ~/.ssh/authorized_keys
  e. Set proper permissions: chmod 600 ~/.ssh/authorized_keys
  f. exit

4. Test Key-Based Login
  a. Back in power shell copy command:ssh -i $env:USERPROFILE\.ssh\id_ed25519 user@serverip
  b. You should now be able to login without a password.

SETTING UP SSH ON SERVER TERMINAL
1. Update server: sudo apt update && sudo apt upgrade -y
2. Install OpenSSH: sudo apt install openssh-server -y
  a. Verify Installtion: ssh -V
  b. Should see something like this: OpenSSH_9.6p1 Ubuntu-3ubuntu13
3. Enable SSH: sudo systemctl enable ssh
4. Start SSH service: sudo systemctl start ssh
5. To check status: sudo systemctl status ssh


ADDING SECURITY - FIREWALL SETUP
We will now setup a firewall to only allow SSH while blocking everything else.
1. Install the ufw: sudo apt install ufw -y
2. Create rule to allow SSH: sudo ufw allow OpenSSH
3. Enable the ufw: sudo ufw enable
4. View status of ufw: sudo ufw status verbose
  a. should see something like this:
  To                         Action      From
  --                         ------      ----
  22/tcp (OpenSSH)           ALLOW IN    Anywhere
  22/tcp (OpenSSH (v6))      ALLOW IN    Anywhere (v6)

ADDING FAIL2BAN
Fail2Ban is a security tool that helps protect servers from brute-force attacks by monitoring authentication logs and automatically banning IPs that show suspicious behavior (like repeated failed login attempts).  
It works alongside your SSH configuration and firewall (UFW) to add automated intrusion prevention.
1. Update the server and install:
  a. sudo apt update
  b. sudo apt install fail2ban -y
  c. sudo systemctl enable --now fail2ban
2. Check status: 
  a. sudo systemctl status fail2ban
3. Create a local config file:
  a. sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
  b. sudo nano /etc/fail2ban/jail.local
4. Adding key configurations to our file. (Feel free to configure this to your needs)

      [DEFAULT]
      bantime  = 1h
      findtime = 10m
      maxretry = 3
      dbfile = /var/lib/fail2ban/fail2ban.sqlite3

    a. bantime: How long (in seconds, minutes, or hours) an IP stays banned. Here it’s 1 hour.
    b. findtime: The time window to count failed login attempts.
    c. maxretry: Number of failed login attempts allowed before banning.
    d. dbfile: Path to the SQLite database that stores bans persistently — useful after restarts.

5. Adding SSH configurations

    [sshd]
    enabled = true
    port = ssh
    logpath = /var/log/auth.log
    backend = systemd

  a. enabled: Turns this protection on.
  b. port: Which port to monitor — set to “ssh” or your custom SSH port.
  c. logpath: Path to your authentication logs.
  d. backend: Defines how Fail2Ban reads logs; “systemd” works best for modern Ubuntu.

6. Restart service to load config
  a. sudo systemctl restart fail2ban

7. Check active jails
  a. sudo fail2ban-client status

8. Check SSH jail details
  a. sudo fail2ban-client status sshd















